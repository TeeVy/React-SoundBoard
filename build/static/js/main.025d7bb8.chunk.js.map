{"version":3,"sources":["Header.js","Home.js","NoMatch.js","SoundsComponent.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","title","location","pathname","split","undefined","AppBar","position","Toolbar","IconButton","edge","onClick","toggleDrawer","color","aria-label","Typography","variant","Home","Grid","item","xs","align","NoMatch","fontSize","Divider","SoundsComponent","category","useParams","useState","CircularProgress","sounds","setSounds","useEffect","console","log","socket","emit","once","soundsButtons","map","sound","index","audio","Audio","audioName","slice","delay","md","key","Zoom","in","style","transitionDelay","Button","size","fullWidth","play","openSocket","theme","createMuiTheme","palette","primary","main","secondary","typography","h3","fontWeight","Boolean","window","hostname","match","ReactDOM","render","ListItem","button","ListItemIcon","ListItemText","categories","setCategories","on","categoriesButtons","to","useStyles","makeStyles","list","width","padding","className","ThemeProvider","side","classes","React","left","state","setState","open","event","type","SwipeableDrawer","onClose","onOpen","role","onKeyDown","List","Container","container","spacing","exact","path","children","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.025d7bb8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar, IconButton, Typography } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { withRouter } from \"react-router\";\r\n\r\nfunction Header(props) {\r\n  let title = props.location.pathname.split('/')[2];\r\n  if (title === undefined) {\r\n    title = 'Soundboard';\r\n  }\r\n  return (\r\n    <div>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" onClick={props.toggleDrawer('left', true)} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">{title}</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Toolbar />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(Header);\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nfunction Home(props) {\r\n\r\n  return (\r\n    <Grid item xs={12} align=\"left\">\r\n      Bienvenue sur votre SoundBoard.<br />\r\n      Commmencez par cliquer sur le Menu (ou swipez vers la droite) pour sélectionner une catégorie !\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nfunction NoMatch() {\r\n  return (\r\n    <Grid item xs={12}>\r\n      <Typography variant=\"h3\" color=\"secondary\"><ErrorIcon fontSize=\"large\" /> Erreur 404</Typography>\r\n      <Divider />\r\n      <Typography variant=\"h5\">Cette page n'existe pas.</Typography>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default NoMatch;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport { useParams } from 'react-router-dom';\r\nimport { socket } from './App';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport NoMatch from './NoMatch';\r\n\r\nfunction SoundsComponent() {\r\n\r\n  const { category } = useParams();\r\n  const [sounds, setSounds] = useState(\r\n    <Grid item xs={12}>\r\n      <CircularProgress />\r\n    </Grid>\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log('CLIENT : Clic sur ' + category);\r\n    socket.emit('category', category);\r\n    socket.once('sounds', function (sounds) {\r\n      console.log(sounds);\r\n      if (sounds) {\r\n        const soundsButtons = sounds.map((sound, index) => {\r\n          const audio = new Audio('/sounds/' + category + '/'+ sound);\r\n          const audioName = sound.slice(0, -4);\r\n          const delay = index*100;\r\n          return (\r\n            <Grid item xs={12} md={6} key={sound}>\r\n              <Zoom in={true} style={{ transitionDelay: delay }}>\r\n                <Button variant=\"contained\" color=\"secondary\" size=\"large\" fullWidth={true} onClick={() => audio.play()}>{audioName}</Button>\r\n              </Zoom>\r\n            </Grid>\r\n          )\r\n        });\r\n        setSounds(soundsButtons);\r\n      } else {\r\n        setSounds(<NoMatch />);\r\n      }\r\n    });\r\n  }, [category]);\r\n\r\n  return (sounds);\r\n}\r\n\r\nexport default SoundsComponent;\r\n","//App.js\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport openSocket from 'socket.io-client';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\nimport Header from './Header.js';\r\n\r\n//Menu\r\nimport { makeStyles, createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport VolumeUpRoundedIcon from '@material-ui/icons/VolumeUpRounded';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n//React-Router\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Home from './Home';\r\nimport NoMatch from './NoMatch';\r\n\r\nimport SoundsComponent from './SoundsComponent';\r\n\r\nexport const socket = openSocket('localhost:8000');\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#1b4965',\r\n    },\r\n    secondary: {\r\n      main: '#ee6352',\r\n    }\r\n  },\r\n  typography: {\r\n    h3: {\r\n      fontWeight: 500,\r\n    }\r\n  }\r\n});\r\n\r\nexport function App () {\r\n\r\n  const [categories, setCategories] = useState(\r\n    <ListItem button>\r\n      <ListItemIcon>{<ErrorIcon />}</ListItemIcon>\r\n      <ListItemText primary='Aucune catégorie détectée.' />\r\n    </ListItem>\r\n  );\r\n\r\n  socket.on('categories', function (categories) {\r\n    console.log('CLIENT : Catégories détectées : ' + categories);\r\n    const categoriesButtons = categories.map((category) =>\r\n      <Link to={'/category/' + category} key={category}>\r\n        <ListItem button>\r\n          <ListItemIcon>{<VolumeUpRoundedIcon />}</ListItemIcon>\r\n          <ListItemText primary={category} />\r\n        </ListItem>\r\n      </Link>\r\n    );\r\n    setCategories(categoriesButtons);\r\n  });\r\n\r\n  const useStyles = makeStyles({\r\n    list: {\r\n      width: 250,\r\n    },\r\n  });\r\n\r\n  function SwipeableTemporaryDrawer() {\r\n    const classes = useStyles();\r\n    const [state, setState] = React.useState({\r\n      left: false,\r\n    });\r\n\r\n    const toggleDrawer = (side, open) => event => {\r\n      if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n        return;\r\n      }\r\n\r\n      setState({ ...state, [side]: open });\r\n    };\r\n\r\n    const sideList = side => (\r\n      <div\r\n        className={classes.list}\r\n        role=\"presentation\"\r\n        onClick={toggleDrawer(side, false)}\r\n        onKeyDown={toggleDrawer(side, false)}\r\n      >\r\n        <List>\r\n          <Link to={'/'}>\r\n            <ListItem button>\r\n              <ListItemIcon>{<HomeIcon />}</ListItemIcon>\r\n              <ListItemText primary={'Home'} />\r\n            </ListItem>\r\n          </Link>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {categories}\r\n        </List>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Header toggleDrawer={toggleDrawer} />\r\n        <SwipeableDrawer\r\n          open={state.left}\r\n          onClose={toggleDrawer('left', false)}\r\n          onOpen={toggleDrawer('left', true)}\r\n        >\r\n          {sideList('left')}\r\n        </SwipeableDrawer>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n  \t\t<div style={{ padding: 20 }} className=\"App\">\r\n        <ThemeProvider theme={theme}>\r\n          <SwipeableTemporaryDrawer />\r\n          <Container>\r\n            <Grid container spacing={2}>\r\n              <Switch>\r\n                <Route exact path=\"/\">\r\n                  <Home />\r\n                </Route>\r\n                <Route path=\"/category/:category\" children={<SoundsComponent />} />\r\n                <Route path=\"*\">\r\n                  <NoMatch />\r\n                </Route>\r\n              </Switch>\r\n            </Grid>\r\n          </Container>\r\n        </ThemeProvider>\r\n  \t\t</div>\r\n    </Router>\r\n\t);\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}